/**
 * Thomas Keck 2016
 */

#pragma once

#include <Eigen/Dense>
#include <vector>
#include <iostream>

#define FastFit_VERSION_MAJOR @FastFit_VERSION_MAJOR@
#define FastFit_VERSION_MINOR @FastFit_VERSION_MINOR@

#ifdef DEBUG
#undef DEBUG
#endif
// #define DEBUG

class Helix {
  enum Coordinates {
    X = 0,
    Y = 1,
    Z = 2
  };

  public:
    /**
     * Create a helix parametrisation in a magnetic field for a particle with a momentum p at a position x.
     * This parametrisation is independent of the position of the particle on the helix, hence different x
     * with the corresponding p in the same magnetic field yield the same parametrisation.
     */
    Helix(double alpha, const Eigen::Matrix<double, 3, 1> &x, const Eigen::Matrix<double, 3, 1> &p);
      
    /**
     * Create an empty Helix object 
     */
    Helix() = default;

    /**
     * Copy a Helix object
     */
    Helix(const Helix&) = default;

    /**
     * Assign a Helix object
     */
    Helix& operator=(const Helix &) = default;

    /**
     * Return alpha
     */
    inline double GetAlpha() const { return m_alpha; }

    /**
     * Return 5 dimensional helix parametrisation
     */
    inline const Eigen::Matrix<double, 5, 1>& GetParametrisation() const { return m_parametrisation; }
  
    /**
     * Return Jacobian for Vertex Coordinates
     */
    inline const Eigen::Matrix<double, 5, 3>& GetVertexJacobian() const { return m_A; }
    
    /**
     * Return Jacobian for Momentum Coordindates
     */
    inline const Eigen::Matrix<double, 5, 3>& GetMomentumJacobian() const { return m_B; }
    
    /**
     * Return Constant offset of linear expansion
     */
    inline const Eigen::Matrix<double, 5, 1>& GetConstantOffset() const { return m_c0; }

    /**
     * Return position at perigee
     */
    inline Eigen::Matrix<double, 3, 1> GetPositionAtPerigee() const {
        Eigen::Matrix<double, 3, 1> x_perigee;
        x_perigee << m_parametrisation(3) * std::sin(m_parametrisation(2)),
                    -m_parametrisation(3) * std::cos(m_parametrisation(2)),
                     m_parametrisation(4);
        return x_perigee;
    }
    
    /**
     * Return momentum at perigee
     */
    inline Eigen::Matrix<double, 3, 1> GetMomentumAtPerigee() const {
        Eigen::Matrix<double, 3, 1> p_perigee;
        p_perigee << std::cos(m_parametrisation(2)) / m_parametrisation(0),
                     std::sin(m_parametrisation(2)) / m_parametrisation(0),
                     m_parametrisation(1) / m_parametrisation(0);
        return p_perigee;
    }


  private:
    double m_alpha; /**< Magnetic field times charge times kappa */
    Eigen::Matrix<double, 5, 1> m_parametrisation; /**< 5 dimensional Helix parametrisation */
    Eigen::Matrix<double, 5, 3> m_A; /**< Jacobi matrix for vertex coordinates */
    Eigen::Matrix<double, 5, 3> m_B; /**< Jacobi matrix for momentum coordinates */
    Eigen::Matrix<double, 5, 1> m_c0; /**< Constant offset of linear expansion */


};

class FastFit {

  enum Coordinates {
    X = 0,
    Y = 1,
    Z = 2
  };

  public:
    /**
     * Constructor of a new fit object
     * Initialize the internal state of the vertex fitter using the kinematic data
     * of the given particle object
     * @param mother the particle which decay vertex is fitted
     */
    FastFit(unsigned int numberOfDaughters, double magnetic_field = 1.5);

    /**
     * Set IP Profile to constrain the fit to the intersection point region
     * by adding an additional measurement
     * @param vertex
     * @param coveriance (3x3 matrix object)
     */
    template<class TV, class TE>
    void SetIPProfile(const TV &vertex, const TE &variance) {

        m_use_ip_constraint = true;
        m_ip_vertex << vertex[X], vertex[Y], vertex[Z];
        Eigen::Matrix<double, 3, 3> ip_variance;
        m_ip_variance << variance[X][X], variance[X][Y], variance[X][Z],
                         variance[Y][X], variance[Y][Y], variance[Y][Z],
                         variance[Z][X], variance[Z][Y], variance[Z][Z];

        if (invertAndCheck(m_ip_variance, m_ip_variance_inv) == false) {
#ifdef DEBUG
          std::cout << "Affected Matrix was m_ip_variance_inv" << std::endl;
          std::cout << "Setting the IP Profile failed! I reset the constraint to 0." << std::endl;
#endif
          m_use_ip_constraint = false;
          m_ip_vertex = Eigen::Matrix<double, 3, 1>::Zero();
          m_ip_variance << 1000.0,   0.0,   0.0,
                               0.0, 1000.0,   0.0,
                               0.0,   0.0, 1000.0;
          m_ip_variance_inv << 0.001,   0.0,   0.0,
                               0.0, 0.001,   0.0,
                               0.0,   0.0, 0.001;
        }

    }

    /**
     * Set kinematic information of i-th daughter particle
     * @param i the index of the daughter you want to set
     * @param charge the charge of the particle in units of e
     * @param momentum the momentum in GeV
     * @param vertex the POCA of the track or production vertex in cm
     * @param error the covariance matrix of position and momentum (6x6 x,y,z,px,py,pz)
     */
    template<class TM, class TV, class TE>
    void SetDaughter(unsigned int i, int charge, const TM &momentum, const TV &vertex, const TE &error) {

        if(i >= m_numberOfDaughters) {
          throw std::runtime_error("Invalid index passed to SetDaughter");
        }

        const double alpha = m_magnetic_field * charge * kappa;
    
        Eigen::Matrix<double, 3, 1> x;
        x << vertex[X], vertex[Y], vertex[Z];
        
        Eigen::Matrix<double, 3, 1> p;
        p << momentum[X], momentum[Y], momentum[Z];
        
        m_original_helix[i] = Helix(alpha, x, p);

        m_smoothed_momenta[i] = p;
        for(unsigned int j = 0; j < 6; ++j) {
          for(unsigned int k = 0; k < 6; ++k) {
            m_variances[i](j, k) = error[j][k];
          }
        }
    }
    
    /**
     * Set kinematic information of i-th daughter particle
     * Convinience function for the Belle II experiment code
     * @param i the index of the daughter you want to set
     * @param Particle object of the Belle II software framework
     */
    template<class Particle>
    void Belle2SetDaughter(unsigned int i, const Particle *particle) {

        if(i >= m_numberOfDaughters) {
          throw std::runtime_error("Invalid index passed to SetDaughter");
        }
        
        const double alpha = m_magnetic_field * particle->getCharge() * kappa;
    
        Eigen::Matrix<double, 3, 1> x;
        x << particle->getX(), particle->getY(), particle->getZ();
        
        Eigen::Matrix<double, 3, 1> p;
        p << particle->getPx(), particle->getPy(), particle->getPz();
        
        m_original_helix[i] = Helix(alpha, x, p);

        m_smoothed_momenta[i] = p;
        // (x, p) instead of (p, E, x)
        const auto& error = particle->getMomentumVertexErrorMatrix();
        m_variances[i] <<  error[4][4], error[4][5], error[4][6], error[4][0], error[4][1], error[4][2],
                           error[5][4], error[5][5], error[5][6], error[5][0], error[5][1], error[5][2],
                           error[6][4], error[6][5], error[6][6], error[6][0], error[6][1], error[6][2],
                           error[0][4], error[0][5], error[0][6], error[0][0], error[0][1], error[0][2],
                           error[1][4], error[1][5], error[1][6], error[1][0], error[1][1], error[1][2],
                           error[2][4], error[2][5], error[2][6], error[2][0], error[2][1], error[2][2];

    }
    
    /**
     * Update kinematic information of the mother particle
     * Convinience function for the Belle II experiment code
     * @param Particle object of the Belle II software framework
     */
    template<class Particle>
    void Belle2UpdateMother(Particle *particle) const {
    
        auto vertex = particle->getVertex();
        vertex.SetX(this->GetVertex(X));
        vertex.SetY(this->GetVertex(Y));
        vertex.SetZ(this->GetVertex(Z));

        decltype(particle->get4Vector()) momentum;
        momentum.SetPx(0.0);
        momentum.SetPy(0.0);
        momentum.SetPy(0.0);
        momentum.SetE(0.0);
        for (unsigned int i = 0; i < m_numberOfDaughters; ++i) {
          decltype(particle->get4Vector()) child_momentum;

          child_momentum.SetPx(m_smoothed_momenta[i](X));
          child_momentum.SetPy(m_smoothed_momenta[i](Y));
          child_momentum.SetPy(m_smoothed_momenta[i](Z));
          child_momentum.SetE(particle->getDaughter(i)->getEnergy());

          momentum += child_momentum;
        }

        auto error = particle->getMomentumVertexErrorMatrix();
        for(unsigned int i = 0; i < 7; ++i) {
          for(unsigned int j = 0; i < 7; ++i) {
            error(i, j) = 0.0;
          }
        }
        std::vector<unsigned int> map = {4, 5, 6, 0, 1, 2};
        for(unsigned int i = 0; i < 6; ++i) {
          for(unsigned int j = 0; i < 6; ++i) {
            error(map[i], map[j]) = this->GetVariance(i, j);
          }
        }

        particle->setVertex(vertex);
        particle->set4Vector(momentum);
        particle->setMomentumVertexErrorMatrix(error);

    }
    
    /**
     * Update kinematic information of i-th daughter particle
     * Convinience function for the Belle II experiment code
     * @param i the index of the daughter you want to set
     * @param Particle object of the Belle II software framework
     */
    template<class Particle>
    void Belle2UpdateDaughter(unsigned int i, Particle *particle) const {

        if(i >= m_numberOfDaughters) {
          throw std::runtime_error("Invalid index passed to SetDaughter");
        }
        
        auto vertex = particle->getVertex();
        vertex.SetX(this->GetVertex(X));
        vertex.SetY(this->GetVertex(Y));
        vertex.SetZ(this->GetVertex(Z));

        auto momentum = particle->get4Vector();
        momentum.SetPx(m_smoothed_momenta[i](X));
        momentum.SetPy(m_smoothed_momenta[i](Y));
        momentum.SetPy(m_smoothed_momenta[i](Z));
        momentum.SetE(particle->getDaughter(i)->getEnergy());

        auto error = particle->getMomentumVertexErrorMatrix();
        for(unsigned int i = 0; i < 7; ++i) {
          for(unsigned int j = 0; i < 7; ++i) {
            error(i, j) = 0.0;
          }
        }
        std::vector<unsigned int> map = {4, 5, 6, 0, 1, 2};
        for(unsigned int j = 0; j < 6; ++j) {
          for(unsigned int k = 0; k < 6; ++k) {
            error(map[j], map[k]) = this->GetDaughterVariance(i, j, k);
          }
        }

        particle->setVertex(vertex);
        particle->set4Vector(momentum);
        particle->setMomentumVertexErrorMatrix(error);

    }

    /**
     * Fit the vertex using the internally stored kinematic data
     * @param maximumNumberOfFitIterations the maximum number of kalman fit iterations
     * @param magnetic_field the magnetic field to use in tesla
     */
    bool fit(unsigned int maximumNumberOfFitIterations = 3);

    /**
     * Get Chi2 of last vertex fit
     */
    inline double getChi2() const { return m_chi2; }

    /**
     * Get number of degrees of freedom of the last vertex fit
     */
    inline unsigned int getNDF() const { return m_ndf; }

    /**
     * Get momentum information of i-th daughter particle
     * @param i the index of the daughter
     * @param component X = 0, Y = 1, Z = 2
     */
    double GetDaughterMomentum(unsigned int i, unsigned int component) const;
    
    /**
     * Get daughter variance
     * @param i the index of the daughter
     * @param component_i i index of 6x6 (x, p) covariance matrix
     * @param component_j j index of 6x6 (x, p) covariance matrix
     */
    double GetDaughterVariance(unsigned int i, unsigned int component_i, unsigned int component_j) const;
    
    /**
     * Get fitted vertex
     * @param component X = 0, Y = 1, Z = 2
     */
    double GetVertex(unsigned int component) const;
    
    /**
     * Get variance
     * @param component_i i index of 6x6 (x, p) covariance matrix
     * @param component_j j index of 6x6 (x, p) covariance matrix
     */
    double GetVariance(unsigned int component_i, unsigned int component_j) const;
    
  private:
    /**
     * Invert matrix and check if it suceeded
     * @param input matrix to invert
     * @param output matrix containing the inverted matrix
     */
    template<class T>
    bool invertAndCheck(T& input, T& output)
    {

      output = input.inverse();

      const double epsilon = 1e-2;

      if (not(input * output).isIdentity(epsilon)) {
#ifdef DEBUG
        std::cerr << "Inversion of a matrix in FastFit failed." << std::endl;
#endif
        return false;
      }
      return true;

    }

  private:

    /**
     * Kappa as defined in Data Analysis Techniques for High Energy Physics p. 258,
     * but divided by 100 to convert from m to cm.
     *
     * It is the same number that KFit uses as well (see KFitConst.h)
     *
     * It depends on the units we are using:
     * Magnetic field in T
     * Distances in cm
     * Momenta in GeV/c
     * Charges in C/e
     */
    const double kappa = -0.00299792458;

    bool m_use_ip_constraint; /**< Use IP constraint, important for the number of degrees of freedom */
    Eigen::Matrix<double, 3, 1> m_ip_vertex; /**< IP vertex used for ip profile constraint */
    Eigen::Matrix<double, 3, 3> m_ip_variance; /**< IP vertex variance used for ip profile constraint */
    Eigen::Matrix<double, 3, 3> m_ip_variance_inv; /**< Inverse IP vertex variance used for ip profile constraint */

    double m_magnetic_field; /**< Magnetic field along the z-axis */
    unsigned int m_ndf; /**< Number of degrees of freedom of the fit */
    double m_chi2; /**< Chi2 value of the fit */

    Eigen::Matrix<double, 3, 1> m_vertex; /**< Vertex position vector */
    Eigen::Matrix<double, 3, 3> m_C; /**< Vertex covariance matrix */
    Eigen::Matrix<double, 3, 3> m_C_inv; /**< Inverted vertex covariance matrix */
    Eigen::Matrix<double, 3, 3> m_P; /**< Momentum covariance matrix */

    unsigned int m_numberOfDaughters; /**< Number of daughters */

    std::vector<Helix> m_original_helix; /**< Original helix parametrisation */
    std::vector<Helix> m_current_helix; /**< Current helix parametrisation */

    std::vector<Eigen::Matrix<double, 3, 1>> m_smoothed_momenta; /**< Vector containing smoothed momenta of the daughter particles */
    std::vector<Eigen::Matrix<double, 6, 6>> m_variances; /**< Vector containing variance matrices of the daughter particles */

    std::vector<Eigen::Matrix<double, 5, 5>> m_G; /**< Inverse covariance of measurement with 5 parameters */
    std::vector<Eigen::Matrix<double, 5, 5>> m_GB; /**< G Matrix modified with B Matrix term */
    std::vector<Eigen::Matrix<double, 3, 3>> m_S; /**< S Matrix similar to the Hut Matrix */
    std::vector<Eigen::Matrix<double, 3, 3>> m_E; /**< covariance matrix between x and q */

};

